

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "MDTWeb\Web.config"
//     Connection String Name: "MDTDbConn"
//     Connection String:      "Data Source=LAPTOP-GSQ93AIA\SQLEXPRESS;Initial Catalog=MDTDatabase;Integrated Security=True;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace MDTWeb
{
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<MdtEpisode> MdtEpisodes { get; set; } // MDTEpisode
        System.Data.Entity.DbSet<PatientInformation> PatientInformations { get; set; } // PatientInformation
        System.Data.Entity.DbSet<User> Users { get; set; } // User

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<MdtEpisode> MdtEpisodes { get; set; } // MDTEpisode
        public System.Data.Entity.DbSet<PatientInformation> PatientInformations { get; set; } // PatientInformation
        public System.Data.Entity.DbSet<User> Users { get; set; } // User

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=MDTDbConn")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new MdtEpisodeConfiguration());
            modelBuilder.Configurations.Add(new PatientInformationConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new MdtEpisodeConfiguration(schema));
            modelBuilder.Configurations.Add(new PatientInformationConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class MyDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<MyDbContext>
    {
        public MyDbContext Create()
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<MdtEpisode> MdtEpisodes { get; set; }
        public System.Data.Entity.DbSet<PatientInformation> PatientInformations { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }

        public FakeMyDbContext()
        {
            MdtEpisodes = new FakeDbSet<MdtEpisode>("MdtId");
            PatientInformations = new FakeDbSet<PatientInformation>("PatientId");
            Users = new FakeDbSet<User>("UserId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // MDTEpisode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class MdtEpisode
    {
        public int MdtId { get; set; } // MDTId (Primary key)
        public int MdtPatientId { get; set; } // MDTPatientId
        public int UserId { get; set; } // UserId
        public System.DateTime MdtDate { get; set; } // MDTDate
        public string History { get; set; } // History
        public string Comorbidities { get; set; } // Comorbidities (length: 500)
        public string MdtDiscussion { get; set; } // MDTDiscussion
        public bool Deleted { get; set; } // Deleted
        public System.Guid RowGuid { get; set; } // RowGuid
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [MDTEpisode].([UserId]) (FK_MDTEpisode_PatientInformation)
        /// </summary>
        public virtual User User_UserId { get; set; } // FK_MDTEpisode_PatientInformation

        /// <summary>
        /// Parent User pointed by [MDTEpisode].([UserId]) (FK_MDTEpisode_User)
        /// </summary>
        public virtual User User1 { get; set; } // FK_MDTEpisode_User

        public MdtEpisode()
        {
            Deleted = false;
        }
    }

    // PatientInformation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PatientInformation
    {
        public int PatientId { get; set; } // PatientId (Primary key)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string HospitalNo { get; set; } // HospitalNo (length: 50)
        public string NhsNo { get; set; } // NHSNo (length: 50)
        public System.DateTime DateofBirth { get; set; } // DateofBirth
        public string AddressLine1 { get; set; } // AddressLine1 (length: 50)
        public string AddressLine2 { get; set; } // AddressLine2 (length: 50)
        public string City { get; set; } // City (length: 50)
        public string Postcode { get; set; } // Postcode (length: 50)
        public string GpName { get; set; } // GPName (length: 100)
        public string GpAddressLine1 { get; set; } // GPAddressLine1 (length: 50)
        public string GpAddressLine2 { get; set; } // GPAddressLine2 (length: 50)
        public string GpCity { get; set; } // GPCity (length: 50)
        public string GpPostcode { get; set; } // GPPostcode (length: 50)
        public int UserId { get; set; } // UserId
        public bool Deleted { get; set; } // Deleted
        public System.Guid RowGuid { get; set; } // RowGuid
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [PatientInformation].([UserId]) (FK_PatientInformation_User)
        /// </summary>
        public virtual User User { get; set; } // FK_PatientInformation_User

        public PatientInformation()
        {
            Deleted = false;
        }
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class User
    {
        public int UserId { get; set; } // UserId (Primary key)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string Lastname { get; set; } // Lastname (length: 50)
        public string UserName { get; set; } // UserName (length: 50)
        public string Password { get; set; } // Password (length: 500)
        public string PasswordSalt { get; set; } // PasswordSalt (length: 500)
        public bool IsAdmin { get; set; } // IsAdmin
        public bool IsActive { get; set; } // IsActive
        public bool Deleted { get; set; } // Deleted
        public string UserUniqueId { get; set; } // UserUniqueId (length: 500)
        public System.Guid RowGuid { get; set; } // RowGuid
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation

        /// <summary>
        /// Child MdtEpisodes where [MDTEpisode].[UserId] point to this entity (FK_MDTEpisode_PatientInformation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<MdtEpisode> MdtEpisodes_UserId { get; set; } // MDTEpisode.FK_MDTEpisode_PatientInformation
        /// <summary>
        /// Child MdtEpisodes where [MDTEpisode].[UserId] point to this entity (FK_MDTEpisode_User)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<MdtEpisode> MdtEpisodes1 { get; set; } // MDTEpisode.FK_MDTEpisode_User
        /// <summary>
        /// Child PatientInformations where [PatientInformation].[UserId] point to this entity (FK_PatientInformation_User)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PatientInformation> PatientInformations { get; set; } // PatientInformation.FK_PatientInformation_User

        public User()
        {
            IsAdmin = false;
            IsActive = true;
            Deleted = false;
            MdtEpisodes_UserId = new System.Collections.Generic.List<MdtEpisode>();
            PatientInformations = new System.Collections.Generic.List<PatientInformation>();
            MdtEpisodes1 = new System.Collections.Generic.List<MdtEpisode>();
        }
    }

    #endregion

    #region POCO Configuration

    // MDTEpisode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class MdtEpisodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MdtEpisode>
    {
        public MdtEpisodeConfiguration()
            : this("dbo")
        {
        }

        public MdtEpisodeConfiguration(string schema)
        {
            ToTable("MDTEpisode", schema);
            HasKey(x => x.MdtId);

            Property(x => x.MdtId).HasColumnName(@"MDTId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MdtPatientId).HasColumnName(@"MDTPatientId").HasColumnType("int").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.MdtDate).HasColumnName(@"MDTDate").HasColumnType("datetime").IsRequired();
            Property(x => x.History).HasColumnName(@"History").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Comorbidities).HasColumnName(@"Comorbidities").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.MdtDiscussion).HasColumnName(@"MDTDiscussion").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("bit").IsRequired();
            Property(x => x.RowGuid).HasColumnName(@"RowGuid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.User_UserId).WithMany(b => b.MdtEpisodes_UserId).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_MDTEpisode_PatientInformation
            HasRequired(a => a.User1).WithMany(b => b.MdtEpisodes1).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_MDTEpisode_User
        }
    }

    // PatientInformation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PatientInformationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PatientInformation>
    {
        public PatientInformationConfiguration()
            : this("dbo")
        {
        }

        public PatientInformationConfiguration(string schema)
        {
            ToTable("PatientInformation", schema);
            HasKey(x => x.PatientId);

            Property(x => x.PatientId).HasColumnName(@"PatientId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.HospitalNo).HasColumnName(@"HospitalNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.NhsNo).HasColumnName(@"NHSNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.DateofBirth).HasColumnName(@"DateofBirth").HasColumnType("datetime").IsRequired();
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Postcode).HasColumnName(@"Postcode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.GpName).HasColumnName(@"GPName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.GpAddressLine1).HasColumnName(@"GPAddressLine1").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.GpAddressLine2).HasColumnName(@"GPAddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.GpCity).HasColumnName(@"GPCity").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.GpPostcode).HasColumnName(@"GPPostcode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("bit").IsRequired();
            Property(x => x.RowGuid).HasColumnName(@"RowGuid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.User).WithMany(b => b.PatientInformations).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_PatientInformation_User
        }
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("User", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsRequired().HasMaxLength(500);
            Property(x => x.PasswordSalt).HasColumnName(@"PasswordSalt").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.IsAdmin).HasColumnName(@"IsAdmin").HasColumnType("bit").IsRequired();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("bit").IsRequired();
            Property(x => x.UserUniqueId).HasColumnName(@"UserUniqueId").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.RowGuid).HasColumnName(@"RowGuid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").HasColumnType("datetime").IsOptional();
        }
    }

    #endregion

}
// </auto-generated>

